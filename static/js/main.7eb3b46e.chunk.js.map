{"version":3,"sources":["components/Header.js","components/Footer.js","components/Note.js","components/CreateArea.js","components/Pomodoro/Pomodoro.js","components/App.js","index.js"],"names":["Header","Footer","currentDate","Date","getDate","getMonth","getFullYear","className","Note","props","title","content","onClick","onDelete","id","CreateArea","useState","isExpanded","setExpanded","note","setNote","handleChange","event","target","name","value","prevNote","onChange","placeholder","rows","Zoom","in","Fab","onAdd","preventDefault","Pomodoro","min","setMin","sec","setSec","message","setMessage","useEffect","interval","setInterval","clearInterval","clockMin","clockSec","App","notesArray","setNotesArray","pomoStart","setPomoStart","deleteNote","prevNotes","filter","noteItem","index","currentNote","map","key","fontSize","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7eb3b46e.chunk.js","sourcesContent":["import React from 'react';\nimport ModelTrainingIcon from '@mui/icons-material/ModelTraining';\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>\n      <ModelTrainingIcon/>\n        Productiv8\n        </h1>\n    </header>\n  );\n}\n\nexport default Header;","import React from \"react\";\n\nconst Footer = () => {\n\n  const currentDate = new Date().getDate() + \" / \" + new Date().getMonth() + \" / \" + new Date().getFullYear()\n  return (\n    <footer className=\"fixed-down\">\n      <p>{ currentDate }</p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport \"../styles.css\"\n\nconst Note = (props) => {\n\n  function handleClick() {\n    props.onDelete(props.id); //Sending back props.id, in order for deleteNote function to be able to match id to index of filtered array\n  }\n\n\n  return (\n    <div className=\"note\">\n      <h1>{props.title}</h1>\n      <p>{props.content}</p>\n      <button onClick={handleClick}>\n      <CancelIcon/>\n      </button>\n    </div>\n  );\n}\n\nexport default Note;","import React, { useState } from \"react\";\nimport AddIcon from '@mui/icons-material/Add';\nimport Fab from '@mui/material/Fab';\nimport Zoom from '@mui/material/Zoom';\n\n\nconst CreateArea = (props) => {\n\n  //Expanding createArea only if textarea is clicked on\n  const [isExpanded, setExpanded] = useState(false);\n\n  //1a\n  const [note, setNote] = useState({\n    title: \"\",\n    content: \"\"\n  })\n\n  //Step 1b:\n  const handleChange = (event) => {\n    const {name, value} = event.target;\n    \n    setNote(prevNote => {\n        return {\n          ...prevNote,\n          [name]: value //Setting name to value and adding to state of note object\n        };\n      });\n\n    }\n\n    const submitNote = (event) => {\n  \n      props.onAdd(note); //Sending note's state on each button click to addNote function in App.js and line 50\n\n      //clearing note input areas\n      setNote({\n        title: \"\",\n        content: \"\"\n      })\n      event.preventDefault(); \n    }\n\n    const expand = (event) => {\n      setExpanded(true);\n    }\n  \n    return (\n      <div>\n        <form className=\"create-note\">\n\n          {isExpanded ?\n\n              <input\n              name=\"title\"\n              onChange={handleChange}\n              value={note.title}\n              placeholder=\"Title\"\n              />\n  \n           : null\n          }\n        \n          <textarea\n            name=\"content\"\n            onChange={handleChange}\n            onClick={expand}\n            value={note.content}\n            placeholder=\"Take a note...\"\n            rows={isExpanded ? 3: 1}\n          />\n        \n         <Zoom in={isExpanded}>\n           <Fab onClick={submitNote}>\n             <AddIcon/>\n           </Fab>\n         </Zoom>\n\n        </form>\n      </div>\n    );\n  }\n  \n  export default CreateArea;\n  ","import React, {useState, useEffect} from \"react\";\nimport \"./Pomodoro.css\"\n\nconst Pomodoro = () => {\n\n    const [min, setMin] = useState(25);\n    const [sec, setSec] = useState(0);\n    const [message, setMessage] = useState(false);\n\n    useEffect(() => {\n        let interval = setInterval(() => {\n          clearInterval(interval);\n\n          if (sec === 0) {\n            if (min !== 0) {\n              setSec(59);\n              setMin(min - 1);\n            } else {\n              let min = message ? 24 : 4;\n              let sec = 59;\n          \n              setSec(sec);\n              setMin(min);\n              setMessage(!message);\n            }\n          } else {\n            setSec(sec - 1);\n          }\n        }, 1000);\n\n      }, [sec]);\n\n    const clockMin = min < 10 ? `0${min}` : min;\n    const clockSec = sec < 10 ? `0${sec}` : sec;\n\n   \n   return (\n    <div className=\"pomodoro\">\n    <div className=\"message\">\n      {message && <div>Take a break! New session starts in:</div>}\n    </div>\n    <div className=\"timer\">\n      {clockMin}:{clockSec}\n    </div>\n  </div>\n\n    );\n\n}\n\n\nexport default Pomodoro;","import React, {useState} from 'react';\nimport Header from './Header';\nimport Footer from './Footer'\nimport Note from './Note';\nimport CreateArea from \"./CreateArea\";\nimport Pomodoro from  './Pomodoro/Pomodoro';\nimport PlayCircleOutlineIcon from '@mui/icons-material/PlayCircleOutline';\n\nconst App = () => {\n\n  const [notesArray, setNotesArray] = useState([]); \n\n  const [pomoStart, setPomoStart] = useState(false);\n\n  const addNote = (currentNote) => {\n    // Using setNotesArray to now return all previous notes entries + currentNote (from) to the notesArray(from onAdd) array\n    setNotesArray(prevNotes => {\n      return [...prevNotes, currentNote];\n    })\n  }\n\n  const deleteNote = (id) => {\n    setNotesArray(prevNotes => {\n      return prevNotes.filter((noteItem, index) => {\n        return index !== id; //Returning only the values at indexes where the id does not match the one clicked\n      })\n    })\n  }\n\n  //Click handler that signals the pomodoro component to render, else display the button\n  const startClick = (event) => {\n    setPomoStart(true);\n  }\n\n  return (\n    <div>\n       <Header />\n\n       <div className=\"both-sides-content\">\n\n        <div className=\"main-div-item\">\n\n          <CreateArea onAdd={addNote} />\n\n            {notesArray.map((noteItem, index) => {\n                return (\n                  <Note\n                    key={index}\n                    id={index}\n                    title={noteItem.title}\n                    content={noteItem.content}\n                    onDelete={deleteNote}\n                  />\n                );\n            })}\n        </div>\n\n\n        <div className=\"mine main-div-item\">\n            {!pomoStart \n          ? \n                 <PlayCircleOutlineIcon className=\"move-down\" onClick={startClick} fontSize='large'></PlayCircleOutlineIcon>\n          : \n              <Pomodoro/> \n            }\n          </div>\n  \n       </div>\n    \n      <Footer />\n   \n    </div>\n  );\n}\n\nexport default App;\n\n","//1. Create a new React app.\nimport React from 'react';\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\"\nimport \"./styles.css\"\n\n//2. Create a App.jsx component.\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n\n//Step 1a: create a note object in createArea.js, serves as a constructor, and set title and content to empty string, then set first input to value={note.title} and textarea to value={note.content}\n//Step 1b: do onChange = {handleChange} into both inputs and then create handleChange function which captures the name and value of event.target, and then use spread operator to set the note to all \n//the previous name value pairs and the current name value pair\n\n//Making handler for button while in createapp.js, but this handler\n//essentially calls a function addNote that handles it in App.js, and we pass addNote as props by onAdd={addNote}, which allows us\n//to create an array in App.js, but containing the note entries.\n\n//Step 2a: While still in CreateArea.js, for within the button do: onClick={submitNote}, then for the submitNote function, put in \n//props.onAdd(Note);\n\n//Step 2b: Create"],"sourceRoot":""}